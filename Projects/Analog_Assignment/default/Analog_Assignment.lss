
Analog_Assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000100  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000035  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001df  00000000  00000000  000001a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000139  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000201  00000000  00000000  000004c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  000006c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000114  00000000  00000000  00000704  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000093  00000000  00000000  00000818  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  000008ab  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e0       	ldi	r30, 0x00	; 0
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  8a:	0c 94 7e 00 	jmp	0xfc	; 0xfc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <ADC_init>:
#include <avr/io.h>
#include <util/delay.h>
#define F_CPU 16000000

void ADC_init(void) 
{
  92:	80 ec       	ldi	r24, 0xC0	; 192
  94:	87 b9       	out	0x07, r24	; 7
	ADMUX=(1<<REFS1)|(1<<REFS0);
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Using prescalar of 128													//So ADC freq is 16000000/128
  96:	87 e8       	ldi	r24, 0x87	; 135
  98:	86 b9       	out	0x06, r24	; 6
}
  9a:	08 95       	ret

0000009c <ADC_read>:

int ADC_read(unsigned char channel)
{
  9c:	97 b1       	in	r25, 0x07	; 7
  9e:	87 70       	andi	r24, 0x07	; 7
  a0:	89 2b       	or	r24, r25
  a2:	87 b9       	out	0x07, r24	; 7
	channel=channel&0x07; // Keeping channel between 0 to 7
	ADMUX|=channel; // OR ADMUX with channel with cleared last 3 bits
	ADCSRA|=(1<<ADSC); // In ADC Control and Status register A
  a4:	36 9a       	sbi	0x06, 6	; 6
					 // start the conversion of Analog to Digital
	while(!(ADCSRA|=(1<<ADIF))); //Using a loop until ADSC is true i.e. waiting for 
  a6:	34 9a       	sbi	0x06, 4	; 6
								// conversion to complete
	return ADC;					  
  a8:	24 b1       	in	r18, 0x04	; 4
  aa:	35 b1       	in	r19, 0x05	; 5
}
  ac:	c9 01       	movw	r24, r18
  ae:	08 95       	ret

000000b0 <main>:


int main()
{
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	81 bb       	out	0x11, r24	; 17
#include <util/delay.h>
#define F_CPU 16000000

void ADC_init(void) 
{
	ADMUX=(1<<REFS1)|(1<<REFS0);
  b4:	80 ec       	ldi	r24, 0xC0	; 192
  b6:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Using prescalar of 128													//So ADC freq is 16000000/128
  b8:	87 e8       	ldi	r24, 0x87	; 135
  ba:	86 b9       	out	0x06, r24	; 6
	while(1)
	{
		ADC_output=ADC_read(0); // Read analog signal from Port A0
		if(ADC_output<1024)		// ADC_output is in 10 bit resolution from 0 to 1023
		{
			PORTD=0xff;	
  bc:	5f ef       	ldi	r21, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  be:	29 e1       	ldi	r18, 0x19	; 25
  c0:	30 e0       	ldi	r19, 0x00	; 0
			_delay_ms(2000);
			PORTD=0x03;  
  c2:	43 e0       	ldi	r20, 0x03	; 3
}

int ADC_read(unsigned char channel)
{
	channel=channel&0x07; // Keeping channel between 0 to 7
	ADMUX|=channel; // OR ADMUX with channel with cleared last 3 bits
  c4:	87 b1       	in	r24, 0x07	; 7
  c6:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=(1<<ADSC); // In ADC Control and Status register A
  c8:	36 9a       	sbi	0x06, 6	; 6
					 // start the conversion of Analog to Digital
	while(!(ADCSRA|=(1<<ADIF))); //Using a loop until ADSC is true i.e. waiting for 
  ca:	34 9a       	sbi	0x06, 4	; 6
								// conversion to complete
	return ADC;					  
  cc:	84 b1       	in	r24, 0x04	; 4
  ce:	95 b1       	in	r25, 0x05	; 5
	int ADC_output;
	ADC_init();
	while(1)
	{
		ADC_output=ADC_read(0); // Read analog signal from Port A0
		if(ADC_output<1024)		// ADC_output is in 10 bit resolution from 0 to 1023
  d0:	80 50       	subi	r24, 0x00	; 0
  d2:	94 40       	sbci	r25, 0x04	; 4
  d4:	8c f4       	brge	.+34     	; 0xf8 <main+0x48>
		{
			PORTD=0xff;	
  d6:	52 bb       	out	0x12, r21	; 18
  d8:	80 e2       	ldi	r24, 0x20	; 32
  da:	9e e4       	ldi	r25, 0x4E	; 78
  dc:	f9 01       	movw	r30, r18
  de:	31 97       	sbiw	r30, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <main+0x2e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e4:	d9 f7       	brne	.-10     	; 0xdc <main+0x2c>
			_delay_ms(2000);
			PORTD=0x03;  
  e6:	42 bb       	out	0x12, r20	; 18
  e8:	80 e2       	ldi	r24, 0x20	; 32
  ea:	9e e4       	ldi	r25, 0x4E	; 78
  ec:	f9 01       	movw	r30, r18
  ee:	31 97       	sbiw	r30, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <main+0x3e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f4:	d9 f7       	brne	.-10     	; 0xec <main+0x3c>
  f6:	e6 cf       	rjmp	.-52     	; 0xc4 <main+0x14>
			_delay_ms(2000);
		}
		else
		{
			PORTD=0x00;
  f8:	12 ba       	out	0x12, r1	; 18
  fa:	e4 cf       	rjmp	.-56     	; 0xc4 <main+0x14>

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
