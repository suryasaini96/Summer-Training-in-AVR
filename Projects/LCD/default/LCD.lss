
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000001c6  0000023a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000005e  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000619  00000000  00000000  000002be  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000192  00000000  00000000  000008d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003f9  00000000  00000000  00000a69  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  00000e64  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000102  00000000  00000000  00000ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000176  00000000  00000000  00000fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000d8  00000000  00000000  0000114c  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ec       	ldi	r30, 0xC6	; 198
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a6 00 	call	0x14c	; 0x14c <main>
  8a:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <LCD_init>:
	}
  return 0;
}

void LCD_init()
{
  92:	82 e0       	ldi	r24, 0x02	; 2
  94:	82 bb       	out	0x12, r24	; 18
 

void LCD_cmd(unsigned char cmd)
{           
	lcd_port=cmd;
    PORTC&=~(1<<rs);
  96:	a8 98       	cbi	0x15, 0	; 21
    PORTC&=~(1<<rw);
  98:	a9 98       	cbi	0x15, 1	; 21
    PORTC|=(1<<en);
  9a:	aa 9a       	sbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9c:	40 ea       	ldi	r20, 0xA0	; 160
  9e:	5f e0       	ldi	r21, 0x0F	; 15
  a0:	ca 01       	movw	r24, r20
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <LCD_init+0x10>
   	_delay_ms(1);
    PORTC&=~(1<<en);
  a6:	aa 98       	cbi	0x15, 2	; 21
  a8:	20 e2       	ldi	r18, 0x20	; 32
  aa:	3e e4       	ldi	r19, 0x4E	; 78
  ac:	c9 01       	movw	r24, r18
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <LCD_init+0x1c>
}
 

void LCD_cmd(unsigned char cmd)
{           
	lcd_port=cmd;
  b2:	88 e3       	ldi	r24, 0x38	; 56
  b4:	82 bb       	out	0x12, r24	; 18
    PORTC&=~(1<<rs);
  b6:	a8 98       	cbi	0x15, 0	; 21
    PORTC&=~(1<<rw);
  b8:	a9 98       	cbi	0x15, 1	; 21
    PORTC|=(1<<en);
  ba:	aa 9a       	sbi	0x15, 2	; 21
  bc:	ca 01       	movw	r24, r20
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <LCD_init+0x2c>
   	_delay_ms(1);
    PORTC&=~(1<<en);
  c2:	aa 98       	cbi	0x15, 2	; 21
  c4:	c9 01       	movw	r24, r18
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <LCD_init+0x34>
}
 

void LCD_cmd(unsigned char cmd)
{           
	lcd_port=cmd;
  ca:	86 e0       	ldi	r24, 0x06	; 6
  cc:	82 bb       	out	0x12, r24	; 18
    PORTC&=~(1<<rs);
  ce:	a8 98       	cbi	0x15, 0	; 21
    PORTC&=~(1<<rw);
  d0:	a9 98       	cbi	0x15, 1	; 21
    PORTC|=(1<<en);
  d2:	aa 9a       	sbi	0x15, 2	; 21
  d4:	ca 01       	movw	r24, r20
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <LCD_init+0x44>
   	_delay_ms(1);
    PORTC&=~(1<<en);
  da:	aa 98       	cbi	0x15, 2	; 21
  dc:	c9 01       	movw	r24, r18
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <LCD_init+0x4c>
}
 

void LCD_cmd(unsigned char cmd)
{           
	lcd_port=cmd;
  e2:	8c e0       	ldi	r24, 0x0C	; 12
  e4:	82 bb       	out	0x12, r24	; 18
    PORTC&=~(1<<rs);
  e6:	a8 98       	cbi	0x15, 0	; 21
    PORTC&=~(1<<rw);
  e8:	a9 98       	cbi	0x15, 1	; 21
    PORTC|=(1<<en);
  ea:	aa 9a       	sbi	0x15, 2	; 21
  ec:	ca 01       	movw	r24, r20
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <LCD_init+0x5c>
   	_delay_ms(1);
    PORTC&=~(1<<en);
  f2:	aa 98       	cbi	0x15, 2	; 21
  f4:	c9 01       	movw	r24, r18
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LCD_init+0x64>
{
  LCD_cmd(0x02); // Return home
  LCD_cmd(0x38); // For 8 bit mode
  LCD_cmd(0x06); // Increment cursor
  LCD_cmd(0x0c); // Display on cursor off 
}
  fa:	08 95       	ret

000000fc <LCD_cmd>:
 

void LCD_cmd(unsigned char cmd)
{           
  fc:	82 bb       	out	0x12, r24	; 18
	lcd_port=cmd;
    PORTC&=~(1<<rs);
  fe:	a8 98       	cbi	0x15, 0	; 21
    PORTC&=~(1<<rw);
 100:	a9 98       	cbi	0x15, 1	; 21
    PORTC|=(1<<en);
 102:	aa 9a       	sbi	0x15, 2	; 21
 104:	80 ea       	ldi	r24, 0xA0	; 160
 106:	9f e0       	ldi	r25, 0x0F	; 15
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <LCD_cmd+0xc>
   	_delay_ms(1);
    PORTC&=~(1<<en);
 10c:	aa 98       	cbi	0x15, 2	; 21
 10e:	80 e2       	ldi	r24, 0x20	; 32
 110:	9e e4       	ldi	r25, 0x4E	; 78
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <LCD_cmd+0x16>
	_delay_ms(5);
}
 116:	08 95       	ret

00000118 <LCD_data>:

void LCD_data(unsigned char	data)
{           
 118:	82 bb       	out	0x12, r24	; 18
	lcd_port=data;
	PORTC|=(1<<rs);
 11a:	a8 9a       	sbi	0x15, 0	; 21
    PORTC&=~(1<<rw);
 11c:	a9 98       	cbi	0x15, 1	; 21
    PORTC|=(1<<en);
 11e:	aa 9a       	sbi	0x15, 2	; 21
 120:	80 ea       	ldi	r24, 0xA0	; 160
 122:	9f e0       	ldi	r25, 0x0F	; 15
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <LCD_data+0xc>
    _delay_ms(1); //delay for transmitting data
    PORTC&=~(1<<en);
 128:	aa 98       	cbi	0x15, 2	; 21
}
 12a:	08 95       	ret

0000012c <LCD_string>:

void LCD_string(unsigned char *str)
{
 12c:	fc 01       	movw	r30, r24
 12e:	20 ea       	ldi	r18, 0xA0	; 160
 130:	3f e0       	ldi	r19, 0x0F	; 15
 132:	08 c0       	rjmp	.+16     	; 0x144 <LCD_string+0x18>
	_delay_ms(5);
}

void LCD_data(unsigned char	data)
{           
	lcd_port=data;
 134:	82 bb       	out	0x12, r24	; 18
	PORTC|=(1<<rs);
 136:	a8 9a       	sbi	0x15, 0	; 21
    PORTC&=~(1<<rw);
 138:	a9 98       	cbi	0x15, 1	; 21
    PORTC|=(1<<en);
 13a:	aa 9a       	sbi	0x15, 2	; 21
 13c:	c9 01       	movw	r24, r18
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <LCD_string+0x12>
    _delay_ms(1); //delay for transmitting data
    PORTC&=~(1<<en);
 142:	aa 98       	cbi	0x15, 2	; 21
}

void LCD_string(unsigned char *str)
{
	int i=0;
    while(str[i]!='\0')
 144:	81 91       	ld	r24, Z+
 146:	88 23       	and	r24, r24
 148:	a9 f7       	brne	.-22     	; 0x134 <LCD_string+0x8>
    {
		LCD_data(str[i]);
        i++;
	}
}
 14a:	08 95       	ret

0000014c <main>:
void LCD_init();
void LCD_clear();
void LCD_string(unsigned char *str);

int main()
{
 14c:	ff 92       	push	r15
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
	DDRC=0xff;
 156:	8f ef       	ldi	r24, 0xFF	; 255
 158:	84 bb       	out	0x14, r24	; 20
	DDRD=0xff;                 
 15a:	81 bb       	out	0x11, r24	; 17
	LCD_init();
 15c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_init>
}
 

void LCD_cmd(unsigned char cmd)
{           
	lcd_port=cmd;
 160:	80 e8       	ldi	r24, 0x80	; 128
 162:	f8 2e       	mov	r15, r24
 164:	c0 ea       	ldi	r28, 0xA0	; 160
 166:	df e0       	ldi	r29, 0x0F	; 15
 168:	00 e2       	ldi	r16, 0x20	; 32
 16a:	1e e4       	ldi	r17, 0x4E	; 78
 16c:	f2 ba       	out	0x12, r15	; 18
    PORTC&=~(1<<rs);
 16e:	a8 98       	cbi	0x15, 0	; 21
    PORTC&=~(1<<rw);
 170:	a9 98       	cbi	0x15, 1	; 21
    PORTC|=(1<<en);
 172:	aa 9a       	sbi	0x15, 2	; 21
 174:	ce 01       	movw	r24, r28
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <main+0x2a>
   	_delay_ms(1);
    PORTC&=~(1<<en);
 17a:	aa 98       	cbi	0x15, 2	; 21
 17c:	c8 01       	movw	r24, r16
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <main+0x32>
	LCD_init();
    while(1)
  	{ 
		LCD_cmd(0x80); // For first bit position on LCD
		//LCD_data('a');
        LCD_string("Surya");
 182:	80 e6       	ldi	r24, 0x60	; 96
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 96 00 	call	0x12c	; 0x12c <LCD_string>
 18a:	ce 01       	movw	r24, r28
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <main+0x40>
 190:	ed cf       	rjmp	.-38     	; 0x16c <main+0x20>

00000192 <LCD_clear>:
        i++;
	}
}

void LCD_clear()
{           
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	82 bb       	out	0x12, r24	; 18
 

void LCD_cmd(unsigned char cmd)
{           
	lcd_port=cmd;
    PORTC&=~(1<<rs);
 196:	a8 98       	cbi	0x15, 0	; 21
    PORTC&=~(1<<rw);
 198:	a9 98       	cbi	0x15, 1	; 21
    PORTC|=(1<<en);
 19a:	aa 9a       	sbi	0x15, 2	; 21
 19c:	80 ea       	ldi	r24, 0xA0	; 160
 19e:	9f e0       	ldi	r25, 0x0F	; 15
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <LCD_clear+0xe>
   	_delay_ms(1);
    PORTC&=~(1<<en);
 1a4:	aa 98       	cbi	0x15, 2	; 21
 1a6:	80 e2       	ldi	r24, 0x20	; 32
 1a8:	9e e4       	ldi	r25, 0x4E	; 78
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <LCD_clear+0x18>
 1ae:	80 ed       	ldi	r24, 0xD0	; 208
 1b0:	97 e0       	ldi	r25, 0x07	; 7
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1b2:	20 e9       	ldi	r18, 0x90	; 144
 1b4:	31 e0       	ldi	r19, 0x01	; 1
 1b6:	f9 01       	movw	r30, r18
 1b8:	31 97       	sbiw	r30, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <LCD_clear+0x26>
 1bc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1be:	d9 f7       	brne	.-10     	; 0x1b6 <LCD_clear+0x24>

void LCD_clear()
{           
	LCD_cmd(0x01);
	_delay_ms(200); 
}
 1c0:	08 95       	ret

000001c2 <_exit>:
 1c2:	f8 94       	cli

000001c4 <__stop_program>:
 1c4:	ff cf       	rjmp	.-2      	; 0x1c4 <__stop_program>
